#lang eopl

let sum = proc(x) proc(y) -(x,-(0,y))
in ((sum 10) 3)

let sum = proc(x) proc(y) proc(z) -(x,-(0,-(y,-(0,z))))
in (((sum 10) 3) 8)

let makemult = proc (maker)
                   proc (x)
                    proc (y)
                     if zero?(y)
                     then 0
                     else -((((maker maker) x) -(y, 1)), -(0, x))
   in let times = proc (x)
                   proc (y)
                    (((makemult makemult) x) y)

      in let makefact = proc (fact)
                         proc (n)
                          if zero?(n)
                          then 1
                          else ((times n) ((fact fact) -(n, 1)))
         in let factorial = proc (n)
                             ((makefact makefact) n)
            in (factorial 5)
